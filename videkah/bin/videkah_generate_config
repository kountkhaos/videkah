#!/usr/bin/env perl
use warnings;
use strict;

use Cwd;
my $the_pwd = Cwd::abs_path();

my $perl_libpaths;

if ( -d './venda-modules' ) {
    # probably a venda main app checkout
    $perl_libpaths = " ./ ./venda-modules/  ./venda-tests/  ./venda-objects/  ./venda-siteperl/  ./venda-siteperl/i686-linux-thread-multi/";
} elsif  ( -d './common/lib/PaymentProvider/' ) {
    # probably a venda payment service checkout
    $perl_libpaths = " ./ common/t/lib/  site-lib/lib/  common/lib/  tools/lib/  profile-service/PaymentProfileService/lib/  logging-service/PaymentLoggingService/lib/  daemon/PaymentApp/lib/";
} else {
    # a bog standard perl module distro, I guess.
    $perl_libpaths = " ./lib/ ./t/ ";
}


my $example_conf=<<"EOCONF";
###     """""" WHAT ITS GONNA BE :- let videkah_list_of_buffers = [ "videkah_filelist", "videkah_runlist", "videkah_perl_stacktrace", "videkah_perl_static_class_hierarchy", "videkah_perl_ackgrep",  "videkah_config" ]

# *_DIR is where the files are saved.
# *_BY_GIT_BRANCH 0 or 1 , indicating if there is a different file for every git branch.

# if it isn't defined this defaults to the dir .videkah/filelist/
VIDEKAH_FILELIST_DIR=
VIDEKAH_FILELIST_BY_GIT_BRANCH=1

# if it isn't defined this defaults to the dir .videkah/runlist/
VIDEKAH_RUNLIST_DIR=
VIDEKAH_RUNLIST_BY_GIT_BRANCH=1

# if it isn't defined this defaults to the dir .videkah/git_diff/
VIDEKAH_GIT_DIFF_DIR=
VIDEKAH_GIT_DIFF_BY_GIT_BRANCH=1
## VIDEKAH_GIT_DIFF_SPEC=HEAD~1  ## NOT YET IMPLEMENTED

# if it isn't defined this defaults to the dir .videkah/perl_stacktrace/
VIDEKAH_PERL_STACKTRACE_DIR=
VIDEKAH_PERL_STACKTRACE_BY_GIT_BRANCH=1

# if it isn't defined this defaults to the dir .videkah/perl_ackgrep/
VIDEKAH_PERL_ACKGREP_DIR=
VIDEKAH_PERL_ACKGREP_BY_GIT_BRANCH=1

# if it isn't defined this defaults to the dir .videkah/perl_static_class_hierarchy/
VIDEKAH_PERL_STATIC_CLASS_HIERARCHY_DIR=
VIDEKAH_PERL_STATIC_CLASS_HIERARCHY_BY_GIT_BRANCH=1

# ( not yet implemented ) The dir to chdir to BEFORE running a command from the runlist buffer.
RUN_FROM_BASEDIR=$the_pwd


# ( not yet implemented , TODO ) Perl stacktraces can have the wrong absolute path to be navigatable by the perl_stacktrace navigator.
# The following will be for regexes to strip off the leading paths in stacktraces. This needs implementing in the vimrc and the perl stack trace file.
PERL_STACK_TRACE_STRIP_REGEX=

#space separated paths. Just don't have dirs with spaces in , and that is always a bad idea.
PERL_LIBPATHS=$perl_libpaths

#ACKGREP_PATHS will default to PERL_LIBPATHS if it isn't supplied. list of space separated paths. can't cope with paths-with-spaces in at present.
ACKGREP_PATHS=


EOCONF

=pod
#These are to go into the config generation , if they're ever implemented.

# these are going to be for the advanced feature of having more than one of each of these buffers
# this will be the last feature to be implemented. So currently these are placeholders to remind me to do it.
MAX_VIDEKAH_PERL_STACKTRACE_BUFFERS=
MAX_VIDEKAH_PERL_ACKGREP_BUFFERS=
MAX_VIDEKAH_PERL_STATIC_CLASS_HIERARCHY_BUFFERS=

#(as yet unimplemented) Open up all the files in the filelist on startup
OPEN_ALL_FILELIST_AT_STARTUP=0
=cut

for my $dir ( qw{
    .videkah
    .videkah/filelist
    .videkah/runlist
    .videkah/git_diff
    .videkah/perl_stacktrace
    .videkah/perl_ackgrep
    .videkah/perl_static_class_hierarchy

    } ){

    if ( ! -d $dir ) {
        mkdir $dir or die "can't create $dir dir\n" ;
    }

}

if  ( ! -f ".videkah/config" ) {
    burp ( ".videkah/config" , $example_conf )
} else {
    print "there is already a .videkah/config file. NOT over-writing\n";
}


sub burp {
    my( $file_name ) = shift ;
    open( my $fh, ">$file_name" ) || die "can't create $file_name $!" ;
    print $fh @_ ;
}

